// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgres"
  url       = env("DB_URL") // uses connection pooling
  directUrl = env("DB_DIRECT_URL") // uses a direct connection
}

model Car {
  id             String              @id @default(uuid())
  reservations   Reservation[]
  make           Make                @relation(fields: [make_id], references: [id])
  make_id        String
  model          Model               @relation(fields: [model_id], references: [id])
  model_id       String
  color          String
  details        String?
  year           Int
  num_rentals    Int                 @default(0)
  current_lot    Lot                 @relation(fields: [current_lot_id], references: [id])
  current_lot_id String
  car_type       CarType             @relation(fields: [car_type_id], references: [id])
  car_type_id    String
  mileage        Int
  licensePlate   String
  user_added     Manager             @relation(fields: [user_added_id], references: [id])
  user_added_id  String
  date_added     DateTime            @default(now())
  in_use         Boolean             @default(false)
  image_path     String
  car_features   CarFeaturesOnCars[]
}

model Lot {
  id                String        @id @default(uuid())
  name              String        @unique
  address           Address       @relation(fields: [address_id], references: [id])
  address_id        String
  manager           Manager       @relation(fields: [manager_id], references: [id])
  manager_id        String
  current_inventory Car[]
  pickups           Reservation[] @relation("Pickups")
  returns           Reservation[] @relation("Returns")
  closures          Closure[]     @relation("LotClosure")
}

model Reservation {
  id            String   @id @default(uuid())
  car           Car      @relation(fields: [car_ID], references: [id])
  car_ID        String
  pickup_lot    Lot      @relation("Pickups", fields: [pickup_lot_id], references: [id])
  pickup_lot_id String
  return_lot    Lot      @relation("Returns", fields: [return_lot_id], references: [id])
  return_lot_id String
  pickup_date   DateTime
  return_date   DateTime
  date_created  DateTime @default(now())
  renter        Customer @relation(fields: [renter_id], references: [id])
  renter_id     String
}

model Customer {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  reservations Reservation[]
}

model Manager {
  id          String @id @default(uuid())
  email       String @unique
  name        String
  manages_lot Lot[]
  added_cars  Car[]
}

model Model {
  id      String @id @default(uuid())
  name    String
  make    Make   @relation(fields: [make_id], references: [id])
  make_id String
  cars    Car[]
}

model Make {
  id     String  @id @default(uuid())
  name   String
  models Model[]
  cars   Car[]
}

model CarType {
  id    String  @id @default(uuid())
  name  String
  price Decimal
  cars  Car[]
}

model Address {
  id             String @id @default(uuid())
  street_address String
  city           String
  zip_code       Int
  state          String
  lot            Lot[]
}

model Closure {
  id   String   @id @default(uuid())
  date DateTime
  lots Lot[]    @relation("LotClosure")
}

model CarFeature {
  id    String              @id @default(uuid())
  name  String
  price Decimal
  cars  CarFeaturesOnCars[]
}

model CarFeaturesOnCars {
  car            Car        @relation(fields: [car_id], references: [id])
  car_id         String
  car_feature    CarFeature @relation(fields: [car_feature_id], references: [id])
  car_feature_id String

  @@id([car_id, car_feature_id])
}
